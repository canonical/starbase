[tox]
env_list =  # Environments to run when called with no parameters.
    format-{ruff,codespell}
    pre-commit
    lint-{ruff,mypy,pyright,shellcheck,codespell,docs,yaml}
    unit-py3.{10,12}
    integration-py3.10
# Integration tests probably take a while, so we're only running them on Python
# 3.10, which is included in core22.
minversion = 4.6
# Tox will use these requirements to bootstrap a venv if necessary.
# tox-igore-env-name-mismatch allows us to have one virtualenv for all linting.
# By setting requirements here, we make this INI file compatible with older
# versions of tox. Tox >= 3.8 will automatically provision the version provided
# inside of a virtual environment, so users of Ubuntu >= focal can simply
# install tox from apt. Older than that, the user gets an upgrade warning.
requires =
    # renovate: datasource=pypi
    tox-ignore-env-name-mismatch>=0.2.0.post2
    # renovate: datasource=pypi
    tox-gh==1.4.1
# Allow tox to access the user's $TMPDIR environment variable if set.
# This workaround is required to avoid circular dependencies for TMPDIR,
# since tox will otherwise attempt to use the environment's TMPDIR variable.
user_tmp_dir = {env:TMPDIR}

[testenv]  # Default config for all environments. Overridable in each env.
# We have many tests that create temporary files. Unless the user has set a
# TMPDIR, this will prefer putting those temp files in $XDG_RUNTIME_DIR,
# which will speed up those tests since they'll run on a ramdisk.
env_tmp_dir = {user_tmp_dir:{env:XDG_RUNTIME_DIR:{work_dir}}}/tox_tmp/{env_name}
set_env =
    TMPDIR={env_tmp_dir}
    COVERAGE_FILE={env_tmp_dir}/.coverage_{env_name}
pass_env =
    CI
    CRAFT_*
    PYTEST_ADDOPTS
allowlist_externals =
    make

[test]  # Base configuration for unit and integration tests
package = editable
extras = dev
allowlist_externals = mkdir
commands_pre = mkdir -p {tox_root}/results

[testenv:{unit,integration}-py3.{8,9,10,11,12}]  # Configuration for all tests using pytest
base = testenv, test
description =
    unit: Run unit tests with pytest
    integration: Run integration tests with pytest
labels =
    py3.{10,12}: tests
    unit-py3.{10,12}: unit-tests
    integration-py3.{10,12}: integration-tests
change_dir =
    unit: tests/unit
    integration: tests/integration
commands = pytest {tty:--color=yes} --cov={tox_root}/craft_platforms --cov-config={tox_root}/pyproject.toml --cov-report=xml:{tox_root}/results/coverage-{env_name}.xml --junit-xml={tox_root}/results/test-results-{env_name}.xml {posargs}

[testenv:lint-{ruff,shellcheck,codespell,yaml}]
description = Lint the source code
base = testenv
labels = lint
commands =
    ruff: make lint-ruff
    shellcheck: make lint-shellcheck
    codespell: make lint-codespell
    yaml: make lint-yaml

[testenv:lint-{mypy,pyright}]
description = Static type checking
base = testenv
labels = lint, type
commands =
    pyright: make lint-pyright
    mypy: make lint-mypy

[testenv:format-{ruff,codespell}]
description = Automatically format source code
base = testenv, lint
labels = format
commands =
    ruff: make format-ruff
    codespell: make format-codespell

[testenv:pre-commit]
base =
deps = pre-commit
package = skip
no_package = true
env_dir = {work_dir}/pre-commit
runner = ignore_env_name_mismatch
description = Run pre-commit on staged files or arbitrary pre-commit commands (tox run -e pre-commit -- [args])
commands = pre-commit {posargs:run}

[testenv:build-docs]
description = Build sphinx documentation
allowlist_externals = bash
commands = make docs

[testenv:autobuild-docs]
description = Build documentation with an autoupdating server
base = docs
commands = make docs-auto

[testenv:lint-docs]
description = Lint the documentation with sphinx-lint
labels = lint
commands = make lint-docs
