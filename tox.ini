[tox]
env_list =  # Environments to run when called with no parameters.
    lint-{black,ruff,pyright,shellcheck,codespell}
    test-py38
minversion = 4.3.5
# Tox will use these requirements to bootstrap a venv if necessary.
# tox-igore-env-name-mismatch allows us to have one virtualenv for all linting.
# By setting requirements here, we make this INI file compatible with older
# versions of tox. Tox >= 3.8 will automatically provision the version provided
# inside of a virtual environment, so users of Ubuntu >= focal can simply
# install tox from apt. Older than that, the user gets an upgrade warning.
requires =
    # renovate: datasource=pypi
    tox==4.3.5
    # renovate: datasource=pypi
    tox-ignore-env-name-mismatch==0.2.0
# Allow tox to access the user's $TMPDIR environment variable if set.
# This workaround is required to avoid circular dependencies for TMPDIR,
# since tox will otherwise attempt to use the environment's TMPDIR variable.
user_tmp_dir = {env:TMPDIR}

[testenv]  # Default config for all environments. Overridable in each env.
# We have many tests that create temporary files. Unless the user has set a
# TMPDIR, this will prefer putting those temp files in $XDG_RUNTIME_DIR,
# which will speed up those tests since they'll run on a ramdisk.
env_tmp_dir = {user_tmp_dir:{env:XDG_RUNTIME_DIR:{work_dir}}}/tox_tmp/{env_name}
set_env =
    TMPDIR={env_tmp_dir}

[testenv:test-{py38,py39,py310,py311,py312}]  # Configuration for all tests using pytest
description = Run tests with pytest
package = sdist
extras = dev
labels =
    py38, py310, py311: tests, unit-tests
allowlist_externals = mkdir
commands_pre = mkdir -p results
commands = pytest {tty:--color=yes} --cov-report=xml:results/coverage-{env_name}.xml --junit-xml=results/test-results-{env_name}.xml {posargs}

[lint]  # Standard linting configuration
skip_install = true
deps =
    # renovate: datasource=pypi
    black>=22.12.0
    # renovate: datasource=pypi
    ruff>=0.0.226
    # renovate: datasource=pypi
    codespell[tomli]>=2.2.2
    # renovate: datasource=pypi
    mypy[reports]>=0.991
env_dir = {work_dir}/linting
runner = ignore_env_name_mismatch

[shellcheck]
find = find {tox_root} \( -name .git -o -name .tox \) -prune -o -print
filter = file --mime-type -Nnf- | grep shellscript | cut -f1 -d:

[testenv:lint-{black,ruff,pyright,shellcheck,codespell,mypy}]
description = Lint the source code
base = testenv, lint
labels = lint
allowlist_externals =
    pyright: pyright
    shellcheck: bash, xargs
    mypy: mkdir
commands_pre =
    mypy: mkdir -p .mypy_cache
    shellcheck: bash -c '{[shellcheck]find} | {[shellcheck]filter} > {env_tmp_dir}/shellcheck_files'
commands =
    black: black --check --diff {tty:--color} {posargs} .
    ruff: ruff --diff --respect-gitignore {posargs} .
    pyright: pyright --lib {posargs}
    shellcheck: xargs -ra {env_tmp_dir}/shellcheck_files shellcheck
    codespell: codespell --toml {tox_root}/pyproject.toml {posargs}
    mypy: mypy --install-types --non-interactive .

[testenv:format-{black,ruff,codespell}]
description = Automatically format source code
base = testenv, lint
labels = format
commands =
    black: black {tty:--color} {posargs} .
    ruff: ruff --fix --respect-gitignore {posargs} .
    codespell: codespell --toml {tox_root}/pyproject.toml --write-changes {posargs}
